<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Plone Mockup(s)</title>
  <link href="jam/SyntaxHighlighter/styles/shCore.css" rel="stylesheet" type="text/css" />
  <link href="less/shThemeGitHub.css" rel="stylesheet" type="text/css" />
  <link rel="stylesheet/less" type="text/css" href="less/mockup.less" />
  <script src="jam/less/dist/less-1.3.3.js"></script>
  <script src="jam/SyntaxHighlighter/scripts/XRegExp.js"></script>
  <script src="jam/SyntaxHighlighter/scripts/shCore.js"></script>
  <script src="jam/SyntaxHighlighter/scripts/shBrushBash.js"></script>
  <script src="jam/SyntaxHighlighter/scripts/shBrushXml.js"></script>
  <script src="jam/SyntaxHighlighter/scripts/shBrushJScript.js"></script>
</head>

<body>

  <header>
    <div class="container">
      <div id="portal-logo">
        <span class="plone-logo">
          <span class="plone-logo-circle">
            <span class="plone-circle-inner">
              <span class="plone-dot-1"></span>
              <span class="plone-dot-2"></span>
              <span class="plone-dot-3"></span>
            </span>
          </span>
          <span class="plone-text">Plone</span>
        </span>
        Mockup(s)
      </div>
    </div>
  </header>

  <div class="container">
    <div id="content" data-panel="content">
      <!-- EDITORS' NOTE
           In this file we are using "semantic line breaks".
           See this blog post
           http://rhodesmill.org/brandon/2012/one-sentence-per-line/
           in order to learn about it and its many advantages -->
      <p>
        Plone Mockup is an attempt to separate
        <a href="http://plone.org" title="Plone">Plone</a>, the user interface,
        from Plone, the server.
        It leverages <a href="#patterns" title="Patterns">Patterns</a>
        to create a library of rich interaction patterns
        triggered by CSS classes
        and configured via HTML5 <em>data attributes</em>.
      </p>
      <p>
        The mockup is a fully functional prototype of Plone and its bundles.
        As it is realised entirely in HTML5 and Javascript,
        it can be run in a browser
        without the need for a full Plone installation;
        therefore making it easy to showcase Plone's UI
        or developing a new theme.
        Using <a href="http://diazo.org/" title="Diazo">diazo</a>
        it is possible to integrate other backends alongside
        (or instead of)
        Plone.
      </p>

      <div class="row">
        <div class="span4">
          <div class="well">
            <h2>Use it now!</h2>
            <p>
              The only requirements to bootstrap <em>Plone mockup</em>
              are <a href="http://git-scm.org/" title="git">git</a>
              and <a href="http://www.nodejs.org/" title="npm">
                <abbr title="Node package manager">npm</abbr>
              </a>.
            </p>
            <p>
              Make sure you use latest version of <code>nodejs</code>
              and <code>npm</code>.
            </p>
            <p>Then check out the repository from GitHub:</p>
            <pre class="brush: bash;toolbar: false;">
              git clone git://github.com/plone/mockup.git</pre>
            <p>And bootstrap your environment:</p>
            <pre class="brush: bash;toolbar: false;">
              cd mockup
              make bootstrap</pre>

            <!--p>Until Patterns is under heavy development.</p>
                <pre class="brush: bash;toolbar: false;">
                  cd mockup
                  mkdir ext
                  cd ext
                  git clone git://github.com/Patternslib/Patterns.git
                  cd ..
                  ./node_modules/jamjs/bin/jam.js link ext/Patterns</pre-->

            <p>To build all bundles just do:</p>
            <pre class="brush: bash;toolbar: false;">make</pre>

            <p>And you can run tests with:</p>
            <pre class="brush: bash;toolbar: false;">make tests</pre>
            <p>
              Right now tests are
              <img src="https://travis-ci.org/plone/mockup.png?branch=master"
                   alt="Build Status" />.</p>
          </div>
        </div>
        <div class="span8">
          <h2>See it in action!</h2>
          <p>
            Here are all the interactions we have,
            listed in alphabetical order:
          </p>

          <div class="row">
            <div class="span4">
              <h2><a href="patterns.html#autotoc">AutoToc</a></h2>
              <p>
                Generates a <abbr title="Table of contents">TOC</abbr>
                by parsing the HTML of the page and identifying sections
                (via <code>h[123456]</code> tags).
              </p>
              <a href="patterns.html#autotoc"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
            <div class="span4">
              <h2><a href="patterns.html#datetime">DateTime</a></h2>
              <p>
                Allows the user to select a date (with or without time)
                through a calendar.
              </p>
              <a href="patterns.html#datetime"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
          </div>
          <div class="row">
            <div class="span4">
              <h2><a href="patterns.html#expose">Expose</a></h2>
              <p>
                Exposes the focused element
                by darkening everything else on the page.
                Useful to focus the user attention on a particular area.
              </p>
              <a href="patterns.html#expose"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
            <div class="span4">
              <h2><a href="patterns.html#modal">Modal</a></h2>
              <p>
                Creates a modal dialog (also called <em>overlay</em>).
              </p>
              <a href="patterns.html#modal"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
          </div>
          <div class="row">
            <div class="span4">
              <h2><a href="patterns.html#select2">Select2</a></h2>
              <p>
                An advanced selection widget,
                useful for tags, autocompletes,
                multiple or single selections
                from any kind of data source (with search!).
              </p>
              <a href="patterns.html#select2"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
            <div class="span4">
              <h2><a href="patterns.html#accessibilty">Accessibility</a></h2>
              <p>
                Accessibility related features.
              </p>
              <a href="patterns.html#accessibilty"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
            <!-- TODO: This seems to be missing from the patterns page
            <div class="span4">
              <h2><a href="patterns.html#toggle">Toggle</a></h2>
              <p>
                Allows to change some DOM elements attributes
                when a certain event happens (a click by default).
                Useful to implement show/hide toggles,
                dropdown menus, and the like.
              </p>
              <a href="patterns.html#toggle"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
            -->
          </div>
          <div class="row">
            <div class="span4">
              <h2><a href="patterns.html#relateditems">Related Items</a></h2>
              <p>
                An advanced widget for selecting related items.
              </p>
              <a href="patterns.html#relateditems"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
            <div class="span4">
              <h2><a href="patterns.html#cookiedirective">Cookie Directive</a></h2>
              <p>
                A pattern that checks cookies enabled and asks permission for the user to allow cookies or not
              </p>
              <a href="patterns.html#cookiedirective"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
          </div>
          
          <div class="row">
            <div class="span4">
              <h2><a href="patterns.html#tablesorter">Table Sorter</a></h2>
              <p>
                A pattern you can apply to a table so it can have its items rearranged when clicking the header
              </p>
              <a href="patterns.html#tablesorter"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
            <div class="span4">
              <h2><a href="patterns.html#tinymce">TinyMCE</a></h2>
              <p>Provides TinyMCE for textarea.</p>
              <a href="patterns.html#tinymce"
                 class="btn btn-primary pull-right">Demo</a>
            </div>
          </div>
        </div>
      </div>

      <h1 id="bundles">Bundles</h1>
      <p>TODO</p>
      <p>
        Current CMFPlone ECMA scripts status:
        <a href="https://docs.google.com/spreadsheet/ccc?key=0AiJ1qTbr6NdMdDMzNVVqZ1ZIOGFZWHZDV1BPWnM4OEE#gid=0">
          Google doc for keeping track of current status of CMFPlone/ecma_scripts stuff
        </a>
      </p>

      <h1 id="patterns">Patterns</h1>
      <p>
        Patterns
        are a set of conventions to configure interaction via markup.
        If you have developed some Javascript interaction
        (for example, a dropdown menu)
        it's quite likely that
        you've <em>already used the basic concept behind patterns</em>.
      </p>
      <p>
        Basically, almost every <em>jQuery</em> plugin
        expects a certain kind of markup to be present,
        and then expects you to initialize the widget
        by picking out the root element of the widget
        and pass some options to it.
        For example you might have this very basic markup
        for a datetime widget:
      </p>
      <pre class="brush: html; toolbar: false;">
&lt;input id="foo" /&gt;
</pre>
      <p>
        And then you are expected to call some Javascript to initialize it
        (and set options):
      </p>
      <pre class="brush: javascript; toolbar: false;">
$('#foo').datetime({
  format: 'mmmm d, yyyy',
  formatSubmit: 'yyyy-mm-dd'
});</pre>
      <p>
        Then you might find it a little bit tedious
        to call that Javascript for every date widget that's there,
        so you mark all the <code>&lt;input /&gt;</code> tags
        that you want to turn into datepickers with a specific CSS class,
        and call that line of code just once when the DOM is loaded.
      </p>
      <pre class="brush: html; toolbar: false;">
&lt;input id="date-picker-1" class="date-picker" /&gt;
&lt;input id="date-picker-2" class="date-picker" /&gt;
</pre>
      <pre id="initialization-a-la-jquery"
           class="brush: javascript; toolbar: false;">
$(document).ready(function() {
  $('input.date-picker').datetime({
    format: 'mmmm d, yyyy',
    formatSubmit: 'yyyy-mm-dd'
  });
});</pre>
      <p>
        If you got at this stage already in your Javascript code,
        <strong>you are already using the basic idea behind patterns</strong>.
      </p>
      <h3>Why is Patterns better than this?</h3>
      <p>
        Patterns has of course more to offer than just this basic approach:
        automatic binding (and re-binding after reloads),
        taking the options from the DOM via <code>data-pat-*</code> attributes,
        and a unified, coherent approach.
      </p>
      <h3>
        Is this related to
        <a href="http://patternslib.com" title="Patternslib">Patternslib</a>?
      </h3>
      <dl>
        <dt>TL;DR</dt>
        <dd>Yes. But we provide a different set of interactions.</dd>
        <dt>Long story kept long</dt>
        <dd>TODO</dd>
      </dl>
      <h3>Automatic binding</h3>
      <p>
        Automatic binding relieves us of the problem
        of initializing a widget from the markup.
        In our initial example,
        we actually had to
        <a href="#initialization-a-la-jquery"
           title="Manual binding">manually bind the initialization routine</a>
        to the page loading
        (therefore, when the page is loaded,
        all the elements marked as <em>interactive widgets</em>
        will be initialized).
        This works fine as long as we don't start replacing parts of the DOM
        with HTML coming from the backend or, say, Javascript templates.
      </p>
      <p>
        If we start doing that,
        and especially if the replaced parts of the DOM
        contains one or more <em>interactive widgets</em>,
        we have to rebind them all,
        which is quite a tedious thing to code.
      </p>
      <p>
        Patterns instead, will automatically initialize,
        upon page loading,
        all the <em>interactive widgets</em> it find in the document,
        and you can also tell it to rebind all the widgets it finds
        in a particular section of the page,
        when for example we have replaced the content of that section:
      </p>
      <pre class="brush: javascript; toolbar: false;">
define([
  'jquery',
  'js/patterns/base',
  'jam/Patterns/src/registry'
], function($, Base, registry, undefined) {
  // Stuff etc
  var rerender($element) {
      $element.load(
          'http://example.com/my-html',
          function(response.status, request) {
              // Rebinds every pattern found in the AJAX-loaded HTML
              registry.scan($element);
          }
      );
  }
});</pre>
      <p>
        This is a <strong>great improvement over the "manual" way</strong>,
        where rebinding could take tens of lines of code
        or even more for complex examples:
        here, we're down to one line
        <em>that will always work even if we have no idea of which widgets</em>
        will get in.
      </p>
      <h3>Pattern options</h3>
      <p>
        Patterns can take options in two ways:
        from the DOM or via the jQuery interface.
        It is highly recommended to use the DOM interface,
        since it offers a lot more flexibility compared to the jQuery approach.
        Also,
        if we wish to use the automatic binding and rebinding functionality,
        the DOM approach is more straightforward and hassle-free.
      </p>
      <p>
        If we put options in the DOM,
        we have to use HTML5 data attributes.
        It's not necessary to put the options directly on the root node
        of the widget
        (the one with the <code>pat-*</code> class),
        since Patterns will also scan all the parents of that node
        from the bottom upwards,
        so we can for example put the options just once
        on the <code>&lt;body /&gt;</code> tag
        and have all the widgets use the same set of options:
      </p>
      <pre class="brush: html; toolbar: false;">
&lt;body data-pat-datetime-format="d-mmmm-yyyy@HH:MM"
      data-pat-datetime-ampm="true"
      data-pat-datetime-pickadateMonthSelector="false"&gt;
  &lt;!-- Both widgets use the same options --&gt;
  &lt;input class="pat-datetime" /&gt;
  &lt;input class="pat-datetime" /&gt;
&lt;body&gt;</pre>
      <p>
        But if we need to override some options for a certain widget
        (or an entire DOM section)
        we can just put it on the node
        or on whatever DOM element wraps the section:
      </p>
      <pre class="brush: html; toolbar: false;">
&lt;body data-pat-datetime-format="d-mmmm-yyyy@HH:MM"
      data-pat-datetime-ampm="true"&gt;
  &lt;input class="pat-datetime" /&gt;  &lt;!-- There's a month dropdown here --&gt;
  &lt;div data-pat-datetime-pickadateMonthSelector="false"&gt;
    &lt;input class="pat-datetime" /&gt; &lt;!-- but no month dropdown here! --&gt;
    &lt;input class="pat-datetime" /&gt; &lt;!-- And here as well --&gt;
  &lt;/div&gt;
&lt;body&gt;</pre>
      <h3>jQuery interface</h3>
      <p>
        Patterns can also be used as a <em>jQuery</em> plugin,
        passing options as with any other jQuery plugin:
      </p>
      <pre class="brush: javascript; toolbar: false;">
$('.pat-datetime').patternDatetime({
  pickadateYearSelector: true
});</pre>
      <p>
        In this case the options passed to the jQuery function
        will take precedence over the ones defined in the DOM,
        although the parents will still be scanned
        and the options defined there will be picked up
        if they are not overridden in the jQuery call:
      </p>
      <pre class="brush: javascript; toolbar: false;">
{
  showAMPM: true,
  format: "d-mmmm-yyyy@HH:MM",
  pickadateMonthSelector: false,
  pickadateYearSelector: true
}</pre>

      <h2 id="make-a-pattern">Making a pattern</h2>
      <p>TODO</p>

      <h2>Testing the pattern</h2>
      <p>TODO</p>

    </div>

  </div>

  <footer>
    <div class="container">
      <p>Plone<sup>&reg;</sup> and the Plone logo are registered trademarks of
        the Plone Foundation. You’re looking good today.</p>
    </div>
  </footer>

  <script type="text/javascript">
     SyntaxHighlighter.all()
  </script>
</body>

</html>


